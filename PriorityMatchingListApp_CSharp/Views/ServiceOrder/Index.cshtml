@model PriorityMatchingList.ViewModels.EmployeeServiceOrderViewModel
@{
    ViewData["Title"] = "My Service Orders - PriorityMatchingList";
}

<div class="container-fluid mt-4">
    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show success-message" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show error-message" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Employee Information Card -->
    <div class="employee-info fade-in">
        <h3><i class="fas fa-user-circle"></i> Employee Information</h3>
        <div class="employee-details">
            <div class="detail-item">
                <span class="detail-label">Employee ID</span>
                <span class="detail-value">@Model.Employee.EmployeeID</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Name</span>
                <span class="detail-value">@Model.Employee.FirstName @Model.Employee.LastName</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Email</span>
                <span class="detail-value">@Model.Employee.EmailID</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Grade</span>
                <span class="detail-value">@Model.Employee.Grade</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Location</span>
                <span class="detail-value">@Model.Employee.Location</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Date of Join</span>
                <span class="detail-value">@Model.Employee.DateofJoin?.ToString("dd/MM/yyyy")</span>
            </div>
            @if (Model.Employee.Supervisor != null)
            {
                <div class="detail-item">
                    <span class="detail-label">Supervisor</span>
                    <span class="detail-value">@Model.Employee.Supervisor.FirstName @Model.Employee.Supervisor.LastName</span>
                </div>
            }
        </div>
    </div>

    <!-- Service Orders Table -->
    <div class="card fade-in">
        <div class="card-header">
            <h4><i class="fas fa-clipboard-list"></i> My Service Orders (@Model.ServiceOrders.Count)</h4>
        </div>
        <div class="card-body p-0">
            @if (Model.ServiceOrders.Any())
            {
                <div class="table-container">
                    <div class="table-responsive">
                        <table class="table service-order-table">
                            <thead>
                                <tr>
                                    <th><i class="fas fa-hashtag"></i> Service Order ID</th>
                                    <th><i class="fas fa-building"></i> Account Name</th>
                                    <th><i class="fas fa-map-marker-alt"></i> Location</th>
                                    <th><i class="fas fa-user-tie"></i> CC & Role</th>
                                    <th><i class="fas fa-calendar"></i> Required From</th>
                                    <th><i class="fas fa-star"></i> Grade</th>
                                    <th class="status-cell"><i class="fas fa-flag"></i> State</th>
                                    <th class="actions-cell"><i class="fas fa-cogs"></i> Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var order in Model.ServiceOrders)
                                {
                                    <tr>
                                        <td>
                                            <a asp-action="PriorityList" asp-route-serviceOrderId="@order.ServiceOrderID" 
                                               class="btn btn-link p-0 fw-bold text-decoration-none">
                                                #@order.ServiceOrderID
                                            </a>
                                        </td>
                                        <td>
                                            <strong>@order.AccountName</strong>
                                        </td>
                                        <td>
                                            <i class="fas fa-map-pin text-muted me-1"></i>@order.Location
                                        </td>
                                        <td>@order.CCArole</td>
                                        <td>
                                            @if (order.RequiredFrom.HasValue)
                                            {
                                                <span class="badge badge-info">
                                                    @order.RequiredFrom?.ToString("dd/MM/yyyy")
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not specified</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge badge-primary">@order.Grade</span>
                                        </td>
                                        <td class="status-cell">
                                            @{
                                                var statusClass = order.SOState switch
                                                {
                                                    "Open" => "badge-success",
                                                    "Closed" => "badge-danger",
                                                    "InterviewSchedule Redirect Required" => "badge-warning",
                                                    _ => "badge-info"
                                                };
                                            }
                                            <span class="badge @statusClass">@order.SOState</span>
                                            @{
                                                var redirectDict = ViewBag.InterviewRedirects as Dictionary<int, PriorityMatchingListApp.Models.InterviewScheduleRedirect>;
                                                var hasRedirect = redirectDict?.ContainsKey(order.ServiceOrderID) == true;
                                            }
                                        </td>
                                        <td class="actions-cell">
                                            <div class="btn-group" role="group">
                                                <a asp-action="Details" asp-route-id="@order.ServiceOrderID" 
                                                   class="btn btn-sm btn-primary" title="View Details">
                                                    <i class="fas fa-eye"></i> Details
                                                </a>
                                                <a asp-action="PriorityList" asp-route-serviceOrderId="@order.ServiceOrderID" 
                                                   class="btn btn-sm btn-success" title="Priority List">
                                                    <i class="fas fa-list"></i> Priority List
                                                </a>
                                                @if (hasRedirect)
                                                {
                                                    <a href="@redirectDict[order.ServiceOrderID].InterviewScheduleRedirectLink" 
                                                       target="_blank" 
                                                       class="interview-redirect" 
                                                       title="Open Interview Schedule">
                                                        <i class="fas fa-external-link-alt"></i> Interview
                                                    </a>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="alert alert-info d-inline-block">
                        <i class="fas fa-info-circle fa-2x mb-3"></i>
                        <h5>No Service Orders Found</h5>
                        <p class="mb-0">You don't have any service orders assigned to you at the moment.</p>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Associate Willingness Section -->
    @if (Model.PriorityMatchingItems.Any())
    {
        <div class="card fade-in mt-4">
            <div class="card-header">
                <h4><i class="fas fa-thumbs-up"></i> Service Order Willingness (@Model.PriorityMatchingItems.Count)</h4>
                <p class="mb-0 text-light small">Please indicate your willingness to work on the following service orders assigned to you.</p>
            </div>
            <div class="card-body p-0">
                <form asp-action="UpdateWillingness" method="post" id="willingnessForm">
                    @Html.AntiForgeryToken()
                    <div class="table-responsive">
                        <table class="table willingness-table">
                            <thead>
                                <tr>
                                    <th><i class="fas fa-hashtag"></i> Service Order ID</th>
                                    <th><i class="fas fa-building"></i> Account Name</th>
                                    <th><i class="fas fa-map-marker-alt"></i> Location</th>
                                    <th><i class="fas fa-user-tie"></i> Role</th>
                                    <th><i class="fas fa-calendar"></i> Required From</th>
                                    <th><i class="fas fa-star"></i> Grade</th>
                                    <th class="text-center"><i class="fas fa-chart-line"></i> Score</th>
                                    <th class="text-center"><i class="fas fa-trophy"></i> Priority</th>
                                    <th class="text-center"><i class="fas fa-thumbs-up"></i> Willing to Work</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < Model.PriorityMatchingItems.Count; i++)
                                {
                                    var item = Model.PriorityMatchingItems[i];
                                    var isTopPriority = item.Priority == 1;
                                    var rowClass = isTopPriority ? "table-warning" : "";
                                    
                                    <tr class="@rowClass">
                                        <td>
                                            <strong class="text-primary">#@item.ServiceOrderID</strong>
                                        </td>
                                        <td>
                                            <strong>@item.AccountName</strong>
                                        </td>
                                        <td>
                                            <i class="fas fa-map-pin text-muted me-1"></i>@item.Location
                                        </td>
                                        <td>@item.CCArole</td>
                                        <td>
                                            @if (item.RequiredFrom.HasValue)
                                            {
                                                <span class="badge badge-info">
                                                    @item.RequiredFrom?.ToString("dd/MM/yyyy")
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not specified</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge badge-primary">@item.Grade</span>
                                        </td>
                                        <td class="text-center">
                                            @if (item.MatchingIndexScore.HasValue)
                                            {
                                                var scoreClass = item.MatchingIndexScore.Value switch
                                                {
                                                    >= 90 => "badge-success",
                                                    >= 70 => "badge-info", 
                                                    >= 50 => "badge-warning",
                                                    _ => "badge-danger"
                                                };
                                                <span class="badge @scoreClass score-badge">
                                                    @item.MatchingIndexScore%
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td class="text-center">
                                            @if (item.Priority.HasValue)
                                            {
                                                var priorityClass = item.Priority.Value switch
                                                {
                                                    1 => "badge-success",
                                                    2 => "badge-info",
                                                    3 => "badge-warning", 
                                                    _ => "badge-primary"
                                                };
                                                <span class="badge @priorityClass priority-badge">
                                                    @if (item.Priority.Value == 1)
                                                    {
                                                        <i class="fas fa-medal"></i>
                                                    }
                                                    #@item.Priority
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td class="text-center">
                                            <div class="form-check form-switch d-inline-block">
                                                <input type="hidden" name="Items[@i].MatchingListID" value="@item.MatchingListID" />
                                                <input class="form-check-input willingness-checkbox" 
                                                       type="checkbox" 
                                                       name="Items[@i].IsWilling" 
                                                       value="true"
                                                       id="willing_@item.MatchingListID"
                                                       @(item.AssociateWilling == true ? "checked" : "") />
                                                <label class="form-check-label" for="willing_@item.MatchingListID">
                                                    <span class="willing-status">
                                                        @if (item.AssociateWilling == true)
                                                        {
                                                            <span class="text-success"><i class="fas fa-check"></i> Yes</span>
                                                        }
                                                        else if (item.AssociateWilling == false)
                                                        {
                                                            <span class="text-danger"><i class="fas fa-times"></i> No</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-warning"><i class="fas fa-question"></i> Not Set</span>
                                                        }
                                                    </span>
                                                </label>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="card-footer">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="text-muted">
                                <small><i class="fas fa-info-circle"></i> Use the switches to indicate your willingness to work on each service order.</small>
                            </div>
                            <button type="submit" class="btn btn-success btn-lg">
                                <i class="fas fa-save"></i> Update Willingness
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    }
</div>

<style>
    /* Willingness Table Styling */
    .willingness-table {
        margin-bottom: 0;
    }
    
    .willingness-table thead th {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        border: none;
        padding: 15px 12px;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.85rem;
        letter-spacing: 0.5px;
    }
    
    .willingness-table tbody tr {
        transition: all 0.3s ease;
    }
    
    .willingness-table tbody tr:hover {
        background-color: #f8fff9;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .willingness-table tbody td {
        padding: 15px 12px;
        border-top: 1px solid #e9ecef;
        vertical-align: middle;
    }
    
    .form-check-input.willingness-checkbox {
        width: 3rem;
        height: 1.5rem;
        cursor: pointer;
    }
    
    .form-check-input.willingness-checkbox:checked {
        background-color: #28a745;
        border-color: #28a745;
    }
    
    .form-check-input.willingness-checkbox:focus {
        border-color: #28a745;
        box-shadow: 0 0 0 0.25rem rgba(40, 167, 69, 0.25);
    }
    
    .willing-status {
        font-size: 0.9rem;
        font-weight: 600;
        margin-left: 10px;
    }
    
    .form-check {
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .form-check-label {
        margin-left: 0.5rem;
        cursor: pointer;
    }
    
    .score-badge {
        font-size: 0.85rem;
        padding: 6px 10px;
        font-weight: 600;
    }
    
    .priority-badge {
        font-size: 0.9rem;
        padding: 8px 12px;
        font-weight: 700;
    }
    
    /* Table row highlighting for priority */
    .table-warning {
        background-color: rgba(255, 193, 7, 0.1) !important;
    }
    
    /* Success/Error message styling */
    .alert {
        border-radius: 12px;
        margin-bottom: 20px;
        border: none;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        font-weight: 500;
    }
    
    .success-message {
        background: linear-gradient(135deg, #d4edda, #c3e6cb);
        color: #155724;
        border-left: 5px solid #28a745;
        animation: slideInDown 0.5s ease-out;
    }
    
    .error-message {
        background: linear-gradient(135deg, #f8d7da, #f5c6cb);
        color: #721c24;
        border-left: 5px solid #dc3545;
    }
    
    /* Toast notification for JavaScript alerts */
    .toast-notification {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        min-width: 300px;
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        padding: 15px 20px;
        border-radius: 10px;
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
        transform: translateX(400px);
        transition: all 0.3s ease;
        opacity: 0;
    }
    
    .toast-notification.show {
        transform: translateX(0);
        opacity: 1;
    }
    
    .toast-notification.error {
        background: linear-gradient(135deg, #dc3545, #c82333);
    }
    
    .toast-notification.info {
        background: linear-gradient(135deg, #17a2b8, #138496);
    }
    
    /* Button styling */
    .btn-success.btn-lg {
        padding: 12px 30px;
        font-weight: 600;
        border-radius: 8px;
        transition: all 0.3s ease;
    }
    
    .btn-success.btn-lg:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);
    }
    
    /* Animation for status changes */
    .willing-status {
        transition: all 0.3s ease;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Function to show toast notification
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast-notification ${type}`;
            toast.innerHTML = `
                <div style="display: flex; align-items: center; justify-content: space-between;">
                    <div>
                        <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'} me-2"></i>
                        ${message}
                    </div>
                    <button type="button" onclick="this.parentElement.parentElement.remove()" 
                            style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; margin-left: 10px;">
                        &times;
                    </button>
                </div>
            `;
            
            document.body.appendChild(toast);
            
            // Show the toast
            setTimeout(() => toast.classList.add('show'), 100);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 5000);
        }

        // Check for success/error messages on page load
        const successAlert = document.querySelector('.success-message');
        const errorAlert = document.querySelector('.error-message');
        
        if (successAlert) {
            const message = successAlert.textContent.trim();
            showToast(message, 'success');
            // Auto-hide the alert after showing toast
            setTimeout(() => {
                successAlert.style.opacity = '0';
                setTimeout(() => successAlert.style.display = 'none', 300);
            }, 2000);
        }
        
        if (errorAlert) {
            const message = errorAlert.textContent.trim();
            showToast(message, 'error');
        }

        // Handle checkbox changes to update status text
        const checkboxes = document.querySelectorAll('.willingness-checkbox');
        
        checkboxes.forEach(function(checkbox) {
            checkbox.addEventListener('change', function() {
                const statusSpan = this.parentElement.querySelector('.willing-status');
                
                if (this.checked) {
                    statusSpan.innerHTML = '<span class="text-success"><i class="fas fa-check"></i> Yes</span>';
                } else {
                    statusSpan.innerHTML = '<span class="text-danger"><i class="fas fa-times"></i> No</span>';
                }
            });
        });
        
        // Form submission handling
        const form = document.getElementById('willingnessForm');
        if (form) {
            form.addEventListener('submit', function(e) {
                // Count changes made
                const checkedCount = document.querySelectorAll('.willingness-checkbox:checked').length;
                const totalCount = document.querySelectorAll('.willingness-checkbox').length;
                
                // Show confirmation for significant changes
                if (checkedCount === 0) {
                    if (!confirm('You have not selected willingness for any service orders. This means you are not willing to work on any of them. Are you sure?')) {
                        e.preventDefault();
                        return false;
                    }
                }
                
                // Add hidden inputs for unchecked checkboxes to ensure they send false
                const checkboxes = document.querySelectorAll('.willingness-checkbox');
                checkboxes.forEach(function(checkbox) {
                    if (!checkbox.checked) {
                        // Create a hidden input for unchecked checkboxes
                        const hiddenInput = document.createElement('input');
                        hiddenInput.type = 'hidden';
                        hiddenInput.name = checkbox.name;
                        hiddenInput.value = 'false';
                        form.appendChild(hiddenInput);
                    }
                });
                
                // Show loading state
                const submitButton = form.querySelector('button[type="submit"]');
                const originalText = submitButton.innerHTML;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating Preferences...';
                submitButton.disabled = true;
                
                // Show immediate feedback
                showToast('Updating your willingness preferences...', 'info');
                
                // Re-enable button after a delay in case of errors
                setTimeout(function() {
                    submitButton.innerHTML = originalText;
                    submitButton.disabled = false;
                }, 15000);
            });
        }
    });
</script>
